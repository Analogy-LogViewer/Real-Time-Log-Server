// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Analogy/Analogy.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code
using grpc = global::Grpc.Core;
using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Analogy.LogServer
{

    /// <summary>Holder for reflection information generated from Analogy/Analogy.proto</summary>
    public static partial class AnalogyReflection
    {

        #region Descriptor
        /// <summary>File descriptor for Analogy/Analogy.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static AnalogyReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "ChVBbmFsb2d5L0FuYWxvZ3kucHJvdG8SBWdyZWV0Gh9nb29nbGUvcHJvdG9i",
                  "dWYvdGltZXN0YW1wLnByb3RvIvsDChVBbmFsb2d5R1JQQ0xvZ01lc3NhZ2US",
                  "DAoEVGV4dBgBIAEoCRIpCgVMZXZlbBgCIAEoDjIaLmdyZWV0LkFuYWxvZ3lH",
                  "UlBDTG9nTGV2ZWwSKAoERGF0ZRgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5U",
                  "aW1lc3RhbXASEQoJUHJvY2Vzc0lkGAQgASgFEhAKCFRocmVhZElkGAUgASgF",
                  "Eg4KBk1vZHVsZRgGIAEoCRIOCgZTb3VyY2UYByABKAkSEgoKTWV0aG9kTmFt",
                  "ZRgIIAEoCRIQCghGaWxlTmFtZRgJIAEoCRISCgpMaW5lTnVtYmVyGAogASgF",
                  "EhMKC01hY2hpbmVOYW1lGAsgASgJEhAKCENhdGVnb3J5GAwgASgJEgwKBFVz",
                  "ZXIYDSABKAkSVgoVQWRkaXRpb25hbEluZm9ybWF0aW9uGA4gAygLMjcuZ3Jl",
                  "ZXQuQW5hbG9neUdSUENMb2dNZXNzYWdlLkFkZGl0aW9uYWxJbmZvcm1hdGlv",
                  "bkVudHJ5EgoKAklkGA8gASgJEikKBUNsYXNzGBAgASgOMhouZ3JlZXQuQW5h",
                  "bG9neUdSUENMb2dDbGFzcxo8ChpBZGRpdGlvbmFsSW5mb3JtYXRpb25FbnRy",
                  "eRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIiYKE0FuYWxvZ3lN",
                  "ZXNzYWdlUmVwbHkSDwoHbWVzc2FnZRgBIAEoCSJEChZBbmFsb2d5Q29uc3Vt",
                  "ZXJNZXNzYWdlEg8KB21lc3NhZ2UYASABKAkSGQoRc3RyZWFtT2xkTWVzc2Fn",
                  "ZXMYAiABKAgqRQoTQW5hbG9neUdSUENMb2dDbGFzcxILCgdHRU5FUkFMEAAS",
                  "DAoIU0VDVVJJVFkQARIKCgZIQVpBUkQQAhIHCgNQSEkQAyqTAQoTQW5hbG9n",
                  "eUdSUENMb2dMZXZlbBILCgdVTktOT1dOEAASCQoFVFJBQ0UQARILCgdWRVJC",
                  "T1NFEAISCQoFREVCVUcQAxIPCgtJTkZPUk1BVElPThAEEgsKB1dBUk5JTkcQ",
                  "BRIJCgVFUlJPUhAGEgwKCENSSVRJQ0FMEAcSCwoHQU5BTE9HWRAIEggKBE5P",
                  "TkUQCTLHAQoHQW5hbG9neRJcCh5TdWJzY3JpYmVGb3JQdWJsaXNoaW5nTWVz",
                  "c2FnZXMSHC5ncmVldC5BbmFsb2d5R1JQQ0xvZ01lc3NhZ2UaGi5ncmVldC5B",
                  "bmFsb2d5TWVzc2FnZVJlcGx5KAESXgodU3Vic2NyaWJlRm9yQ29uc3VtaW5n",
                  "TWVzc2FnZXMSHS5ncmVldC5BbmFsb2d5Q29uc3VtZXJNZXNzYWdlGhwuZ3Jl",
                  "ZXQuQW5hbG9neUdSUENMb2dNZXNzYWdlMAFCFKoCEUFuYWxvZ3kuTG9nU2Vy",
                  "dmVyYgZwcm90bzM="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { global::Google.Protobuf.WellKnownTypes.TimestampReflection.Descriptor, },
                new pbr::GeneratedClrTypeInfo(null, null, null, null, new[] { typeof(global::Analogy.LogServer.AnalogyGRPCLogClass), typeof(global::Analogy.LogServer.AnalogyGRPCLogLevel), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Analogy.LogServer.AnalogyGRPCLogMessage), global::Analogy.LogServer.AnalogyGRPCLogMessage.Parser, new[]{ "Text", "Level", "Date", "ProcessId", "ThreadId", "Module", "Source", "MethodName", "FileName", "LineNumber", "MachineName", "Category", "User", "AdditionalInformation", "Id", "Class" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analogy.LogServer.AnalogyMessageReply), global::Analogy.LogServer.AnalogyMessageReply.Parser, new[]{ "Message" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Analogy.LogServer.AnalogyConsumerMessage), global::Analogy.LogServer.AnalogyConsumerMessage.Parser, new[]{ "Message", "StreamOldMessages" }, null, null, null)
                }));
        }
        #endregion

    }
    #region Enums
    public enum AnalogyGRPCLogClass
    {
        [pbr::OriginalName("GENERAL")] General = 0,
        [pbr::OriginalName("SECURITY")] Security = 1,
        [pbr::OriginalName("HAZARD")] Hazard = 2,
        [pbr::OriginalName("PHI")] Phi = 3,
    }

    public enum AnalogyGRPCLogLevel
    {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("TRACE")] Trace = 1,
        [pbr::OriginalName("VERBOSE")] Verbose = 2,
        [pbr::OriginalName("DEBUG")] Debug = 3,
        [pbr::OriginalName("INFORMATION")] Information = 4,
        [pbr::OriginalName("WARNING")] Warning = 5,
        [pbr::OriginalName("ERROR")] Error = 6,
        [pbr::OriginalName("CRITICAL")] Critical = 7,
        [pbr::OriginalName("ANALOGY")] Analogy = 8,
        [pbr::OriginalName("NONE")] None = 9,
    }

    #endregion

    #region Messages
    /// <summary>
    /// The request message containing the user's name.
    /// </summary>
    public sealed partial class AnalogyGRPCLogMessage : pb::IMessage<AnalogyGRPCLogMessage>
    {
        private static readonly pb::MessageParser<AnalogyGRPCLogMessage> _parser = new pb::MessageParser<AnalogyGRPCLogMessage>(() => new AnalogyGRPCLogMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AnalogyGRPCLogMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Analogy.LogServer.AnalogyReflection.Descriptor.MessageTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnalogyGRPCLogMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnalogyGRPCLogMessage(AnalogyGRPCLogMessage other) : this()
        {
            text_ = other.text_;
            level_ = other.level_;
            date_ = other.date_ != null ? other.date_.Clone() : null;
            processId_ = other.processId_;
            threadId_ = other.threadId_;
            module_ = other.module_;
            source_ = other.source_;
            methodName_ = other.methodName_;
            fileName_ = other.fileName_;
            lineNumber_ = other.lineNumber_;
            machineName_ = other.machineName_;
            category_ = other.category_;
            user_ = other.user_;
            additionalInformation_ = other.additionalInformation_.Clone();
            id_ = other.id_;
            class_ = other.class_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnalogyGRPCLogMessage Clone()
        {
            return new AnalogyGRPCLogMessage(this);
        }

        /// <summary>Field number for the "Text" field.</summary>
        public const int TextFieldNumber = 1;
        private string text_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Text
        {
            get { return text_; }
            set
            {
                text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Level" field.</summary>
        public const int LevelFieldNumber = 2;
        private global::Analogy.LogServer.AnalogyGRPCLogLevel level_ = global::Analogy.LogServer.AnalogyGRPCLogLevel.Unknown;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Analogy.LogServer.AnalogyGRPCLogLevel Level
        {
            get { return level_; }
            set
            {
                level_ = value;
            }
        }

        /// <summary>Field number for the "Date" field.</summary>
        public const int DateFieldNumber = 3;
        private global::Google.Protobuf.WellKnownTypes.Timestamp date_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Google.Protobuf.WellKnownTypes.Timestamp Date
        {
            get { return date_; }
            set
            {
                date_ = value;
            }
        }

        /// <summary>Field number for the "ProcessId" field.</summary>
        public const int ProcessIdFieldNumber = 4;
        private int processId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ProcessId
        {
            get { return processId_; }
            set
            {
                processId_ = value;
            }
        }

        /// <summary>Field number for the "ThreadId" field.</summary>
        public const int ThreadIdFieldNumber = 5;
        private int threadId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ThreadId
        {
            get { return threadId_; }
            set
            {
                threadId_ = value;
            }
        }

        /// <summary>Field number for the "Module" field.</summary>
        public const int ModuleFieldNumber = 6;
        private string module_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Module
        {
            get { return module_; }
            set
            {
                module_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Source" field.</summary>
        public const int SourceFieldNumber = 7;
        private string source_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Source
        {
            get { return source_; }
            set
            {
                source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "MethodName" field.</summary>
        public const int MethodNameFieldNumber = 8;
        private string methodName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MethodName
        {
            get { return methodName_; }
            set
            {
                methodName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "FileName" field.</summary>
        public const int FileNameFieldNumber = 9;
        private string fileName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FileName
        {
            get { return fileName_; }
            set
            {
                fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "LineNumber" field.</summary>
        public const int LineNumberFieldNumber = 10;
        private long lineNumber_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long LineNumber
        {
            get { return lineNumber_; }
            set
            {
                lineNumber_ = value;
            }
        }

        /// <summary>Field number for the "MachineName" field.</summary>
        public const int MachineNameFieldNumber = 11;
        private string machineName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string MachineName
        {
            get { return machineName_; }
            set
            {
                machineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Category" field.</summary>
        public const int CategoryFieldNumber = 12;
        private string category_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Category
        {
            get { return category_; }
            set
            {
                category_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "User" field.</summary>
        public const int UserFieldNumber = 13;
        private string user_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string User
        {
            get { return user_; }
            set
            {
                user_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "AdditionalInformation" field.</summary>
        public const int AdditionalInformationFieldNumber = 14;
        private static readonly pbc::MapField<string, string>.Codec _map_additionalInformation_codec
            = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 114);
        private readonly pbc::MapField<string, string> additionalInformation_ = new pbc::MapField<string, string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::MapField<string, string> AdditionalInformation
        {
            get { return additionalInformation_; }
        }

        /// <summary>Field number for the "Id" field.</summary>
        public const int IdFieldNumber = 15;
        private string id_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id
        {
            get { return id_; }
            set
            {
                id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "Class" field.</summary>
        public const int ClassFieldNumber = 16;
        private global::Analogy.LogServer.AnalogyGRPCLogClass class_ = global::Analogy.LogServer.AnalogyGRPCLogClass.General;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Analogy.LogServer.AnalogyGRPCLogClass Class
        {
            get { return class_; }
            set
            {
                class_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AnalogyGRPCLogMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AnalogyGRPCLogMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Text != other.Text) return false;
            if (Level != other.Level) return false;
            if (!object.Equals(Date, other.Date)) return false;
            if (ProcessId != other.ProcessId) return false;
            if (ThreadId != other.ThreadId) return false;
            if (Module != other.Module) return false;
            if (Source != other.Source) return false;
            if (MethodName != other.MethodName) return false;
            if (FileName != other.FileName) return false;
            if (LineNumber != other.LineNumber) return false;
            if (MachineName != other.MachineName) return false;
            if (Category != other.Category) return false;
            if (User != other.User) return false;
            if (!AdditionalInformation.Equals(other.AdditionalInformation)) return false;
            if (Id != other.Id) return false;
            if (Class != other.Class) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Text.Length != 0) hash ^= Text.GetHashCode();
            if (Level != global::Analogy.LogServer.AnalogyGRPCLogLevel.Unknown) hash ^= Level.GetHashCode();
            if (date_ != null) hash ^= Date.GetHashCode();
            if (ProcessId != 0) hash ^= ProcessId.GetHashCode();
            if (ThreadId != 0) hash ^= ThreadId.GetHashCode();
            if (Module.Length != 0) hash ^= Module.GetHashCode();
            if (Source.Length != 0) hash ^= Source.GetHashCode();
            if (MethodName.Length != 0) hash ^= MethodName.GetHashCode();
            if (FileName.Length != 0) hash ^= FileName.GetHashCode();
            if (LineNumber != 0) hash ^= LineNumber.GetHashCode();
            if (MachineName.Length != 0) hash ^= MachineName.GetHashCode();
            if (Category.Length != 0) hash ^= Category.GetHashCode();
            if (User.Length != 0) hash ^= User.GetHashCode();
            hash ^= AdditionalInformation.GetHashCode();
            if (Id.Length != 0) hash ^= Id.GetHashCode();
            if (Class != global::Analogy.LogServer.AnalogyGRPCLogClass.General) hash ^= Class.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Text.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Text);
            }
            if (Level != global::Analogy.LogServer.AnalogyGRPCLogLevel.Unknown)
            {
                output.WriteRawTag(16);
                output.WriteEnum((int)Level);
            }
            if (date_ != null)
            {
                output.WriteRawTag(26);
                output.WriteMessage(Date);
            }
            if (ProcessId != 0)
            {
                output.WriteRawTag(32);
                output.WriteInt32(ProcessId);
            }
            if (ThreadId != 0)
            {
                output.WriteRawTag(40);
                output.WriteInt32(ThreadId);
            }
            if (Module.Length != 0)
            {
                output.WriteRawTag(50);
                output.WriteString(Module);
            }
            if (Source.Length != 0)
            {
                output.WriteRawTag(58);
                output.WriteString(Source);
            }
            if (MethodName.Length != 0)
            {
                output.WriteRawTag(66);
                output.WriteString(MethodName);
            }
            if (FileName.Length != 0)
            {
                output.WriteRawTag(74);
                output.WriteString(FileName);
            }
            if (LineNumber != 0)
            {
                output.WriteRawTag(80);
                output.WriteInt64(LineNumber);
            }
            if (MachineName.Length != 0)
            {
                output.WriteRawTag(90);
                output.WriteString(MachineName);
            }
            if (Category.Length != 0)
            {
                output.WriteRawTag(98);
                output.WriteString(Category);
            }
            if (User.Length != 0)
            {
                output.WriteRawTag(106);
                output.WriteString(User);
            }
            additionalInformation_.WriteTo(output, _map_additionalInformation_codec);
            if (Id.Length != 0)
            {
                output.WriteRawTag(122);
                output.WriteString(Id);
            }
            if (Class != global::Analogy.LogServer.AnalogyGRPCLogClass.General)
            {
                output.WriteRawTag(128, 1);
                output.WriteEnum((int)Class);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Text.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
            }
            if (Level != global::Analogy.LogServer.AnalogyGRPCLogLevel.Unknown)
            {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int)Level);
            }
            if (date_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Date);
            }
            if (ProcessId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessId);
            }
            if (ThreadId != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThreadId);
            }
            if (Module.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Module);
            }
            if (Source.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
            }
            if (MethodName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MethodName);
            }
            if (FileName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
            }
            if (LineNumber != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt64Size(LineNumber);
            }
            if (MachineName.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineName);
            }
            if (Category.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Category);
            }
            if (User.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(User);
            }
            size += additionalInformation_.CalculateSize(_map_additionalInformation_codec);
            if (Id.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
            }
            if (Class != global::Analogy.LogServer.AnalogyGRPCLogClass.General)
            {
                size += 2 + pb::CodedOutputStream.ComputeEnumSize((int)Class);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AnalogyGRPCLogMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Text.Length != 0)
            {
                Text = other.Text;
            }
            if (other.Level != global::Analogy.LogServer.AnalogyGRPCLogLevel.Unknown)
            {
                Level = other.Level;
            }
            if (other.date_ != null)
            {
                if (date_ == null)
                {
                    Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                }
                Date.MergeFrom(other.Date);
            }
            if (other.ProcessId != 0)
            {
                ProcessId = other.ProcessId;
            }
            if (other.ThreadId != 0)
            {
                ThreadId = other.ThreadId;
            }
            if (other.Module.Length != 0)
            {
                Module = other.Module;
            }
            if (other.Source.Length != 0)
            {
                Source = other.Source;
            }
            if (other.MethodName.Length != 0)
            {
                MethodName = other.MethodName;
            }
            if (other.FileName.Length != 0)
            {
                FileName = other.FileName;
            }
            if (other.LineNumber != 0)
            {
                LineNumber = other.LineNumber;
            }
            if (other.MachineName.Length != 0)
            {
                MachineName = other.MachineName;
            }
            if (other.Category.Length != 0)
            {
                Category = other.Category;
            }
            if (other.User.Length != 0)
            {
                User = other.User;
            }
            additionalInformation_.Add(other.additionalInformation_);
            if (other.Id.Length != 0)
            {
                Id = other.Id;
            }
            if (other.Class != global::Analogy.LogServer.AnalogyGRPCLogClass.General)
            {
                Class = other.Class;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Text = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            Level = (global::Analogy.LogServer.AnalogyGRPCLogLevel)input.ReadEnum();
                            break;
                        }
                    case 26:
                        {
                            if (date_ == null)
                            {
                                Date = new global::Google.Protobuf.WellKnownTypes.Timestamp();
                            }
                            input.ReadMessage(Date);
                            break;
                        }
                    case 32:
                        {
                            ProcessId = input.ReadInt32();
                            break;
                        }
                    case 40:
                        {
                            ThreadId = input.ReadInt32();
                            break;
                        }
                    case 50:
                        {
                            Module = input.ReadString();
                            break;
                        }
                    case 58:
                        {
                            Source = input.ReadString();
                            break;
                        }
                    case 66:
                        {
                            MethodName = input.ReadString();
                            break;
                        }
                    case 74:
                        {
                            FileName = input.ReadString();
                            break;
                        }
                    case 80:
                        {
                            LineNumber = input.ReadInt32();
                            break;
                        }
                    case 90:
                        {
                            MachineName = input.ReadString();
                            break;
                        }
                    case 98:
                        {
                            Category = input.ReadString();
                            break;
                        }
                    case 106:
                        {
                            User = input.ReadString();
                            break;
                        }
                    case 114:
                        {
                            additionalInformation_.AddEntriesFrom(input, _map_additionalInformation_codec);
                            break;
                        }
                    case 122:
                        {
                            Id = input.ReadString();
                            break;
                        }
                    case 128:
                        {
                            Class = (global::Analogy.LogServer.AnalogyGRPCLogClass)input.ReadEnum();
                            break;
                        }
                }
            }
        }

    }

    /// <summary>
    /// The response message containing the greetings.
    /// </summary>
    public sealed partial class AnalogyMessageReply : pb::IMessage<AnalogyMessageReply>
    {
        private static readonly pb::MessageParser<AnalogyMessageReply> _parser = new pb::MessageParser<AnalogyMessageReply>(() => new AnalogyMessageReply());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AnalogyMessageReply> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Analogy.LogServer.AnalogyReflection.Descriptor.MessageTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnalogyMessageReply()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnalogyMessageReply(AnalogyMessageReply other) : this()
        {
            message_ = other.message_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnalogyMessageReply Clone()
        {
            return new AnalogyMessageReply(this);
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 1;
        private string message_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message
        {
            get { return message_; }
            set
            {
                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AnalogyMessageReply);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AnalogyMessageReply other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Message != other.Message) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Message.Length != 0) hash ^= Message.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Message.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Message);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Message.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AnalogyMessageReply other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Message.Length != 0)
            {
                Message = other.Message;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Message = input.ReadString();
                            break;
                        }
                }
            }
        }

    }

    public sealed partial class AnalogyConsumerMessage : pb::IMessage<AnalogyConsumerMessage>
    {
        private static readonly pb::MessageParser<AnalogyConsumerMessage> _parser = new pb::MessageParser<AnalogyConsumerMessage>(() => new AnalogyConsumerMessage());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<AnalogyConsumerMessage> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::Analogy.LogServer.AnalogyReflection.Descriptor.MessageTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnalogyConsumerMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnalogyConsumerMessage(AnalogyConsumerMessage other) : this()
        {
            message_ = other.message_;
            streamOldMessages_ = other.streamOldMessages_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public AnalogyConsumerMessage Clone()
        {
            return new AnalogyConsumerMessage(this);
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 1;
        private string message_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Message
        {
            get { return message_; }
            set
            {
                message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "streamOldMessages" field.</summary>
        public const int StreamOldMessagesFieldNumber = 2;
        private bool streamOldMessages_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool StreamOldMessages
        {
            get { return streamOldMessages_; }
            set
            {
                streamOldMessages_ = value;
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other)
        {
            return Equals(other as AnalogyConsumerMessage);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(AnalogyConsumerMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (Message != other.Message) return false;
            if (StreamOldMessages != other.StreamOldMessages) return false;
            return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode()
        {
            int hash = 1;
            if (Message.Length != 0) hash ^= Message.GetHashCode();
            if (StreamOldMessages != false) hash ^= StreamOldMessages.GetHashCode();
            if (_unknownFields != null)
            {
                hash ^= _unknownFields.GetHashCode();
            }
            return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output)
        {
            if (Message.Length != 0)
            {
                output.WriteRawTag(10);
                output.WriteString(Message);
            }
            if (StreamOldMessages != false)
            {
                output.WriteRawTag(16);
                output.WriteBool(StreamOldMessages);
            }
            if (_unknownFields != null)
            {
                _unknownFields.WriteTo(output);
            }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize()
        {
            int size = 0;
            if (Message.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
            }
            if (StreamOldMessages != false)
            {
                size += 1 + 1;
            }
            if (_unknownFields != null)
            {
                size += _unknownFields.CalculateSize();
            }
            return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(AnalogyConsumerMessage other)
        {
            if (other == null)
            {
                return;
            }
            if (other.Message.Length != 0)
            {
                Message = other.Message;
            }
            if (other.StreamOldMessages != false)
            {
                StreamOldMessages = other.StreamOldMessages;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                        break;
                    case 10:
                        {
                            Message = input.ReadString();
                            break;
                        }
                    case 16:
                        {
                            StreamOldMessages = input.ReadBool();
                            break;
                        }
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code

// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Analogy/Analogy.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code


namespace Analogy.LogServer
{

    /// <summary>
    /// The greeting service definition.
    /// </summary>
    public static partial class Analogy
    {
        static readonly string __ServiceName = "greet.Analogy";

        static readonly grpc::Marshaller<global::Analogy.LogServer.AnalogyGRPCLogMessage> __Marshaller_greet_AnalogyGRPCLogMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Analogy.LogServer.AnalogyGRPCLogMessage.Parser.ParseFrom);
        static readonly grpc::Marshaller<global::Analogy.LogServer.AnalogyMessageReply> __Marshaller_greet_AnalogyMessageReply = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Analogy.LogServer.AnalogyMessageReply.Parser.ParseFrom);
        static readonly grpc::Marshaller<global::Analogy.LogServer.AnalogyConsumerMessage> __Marshaller_greet_AnalogyConsumerMessage = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Analogy.LogServer.AnalogyConsumerMessage.Parser.ParseFrom);

        static readonly grpc::Method<global::Analogy.LogServer.AnalogyGRPCLogMessage, global::Analogy.LogServer.AnalogyMessageReply> __Method_SubscribeForPublishingMessages = new grpc::Method<global::Analogy.LogServer.AnalogyGRPCLogMessage, global::Analogy.LogServer.AnalogyMessageReply>(
            grpc::MethodType.ClientStreaming,
            __ServiceName,
            "SubscribeForPublishingMessages",
            __Marshaller_greet_AnalogyGRPCLogMessage,
            __Marshaller_greet_AnalogyMessageReply);

        static readonly grpc::Method<global::Analogy.LogServer.AnalogyConsumerMessage, global::Analogy.LogServer.AnalogyGRPCLogMessage> __Method_SubscribeForConsumingMessages = new grpc::Method<global::Analogy.LogServer.AnalogyConsumerMessage, global::Analogy.LogServer.AnalogyGRPCLogMessage>(
            grpc::MethodType.ServerStreaming,
            __ServiceName,
            "SubscribeForConsumingMessages",
            __Marshaller_greet_AnalogyConsumerMessage,
            __Marshaller_greet_AnalogyGRPCLogMessage);

        /// <summary>Service descriptor</summary>
        public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
        {
            get { return global::Analogy.LogServer.AnalogyReflection.Descriptor.Services[0]; }
        }

        /// <summary>Base class for server-side implementations of Analogy</summary>
        [grpc::BindServiceMethod(typeof(Analogy), "BindService")]
        public abstract partial class AnalogyBase
        {
            /// <summary>
            /// Sends a greeting
            /// </summary>
            /// <param name="requestStream">Used for reading requests from the client.</param>
            /// <param name="context">The context of the server-side call handler being invoked.</param>
            /// <returns>The response to send back to the client (wrapped by a task).</returns>
            public virtual global::System.Threading.Tasks.Task<global::Analogy.LogServer.AnalogyMessageReply> SubscribeForPublishingMessages(grpc::IAsyncStreamReader<global::Analogy.LogServer.AnalogyGRPCLogMessage> requestStream, grpc::ServerCallContext context)
            {
                throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
            }

            public virtual global::System.Threading.Tasks.Task SubscribeForConsumingMessages(global::Analogy.LogServer.AnalogyConsumerMessage request, grpc::IServerStreamWriter<global::Analogy.LogServer.AnalogyGRPCLogMessage> responseStream, grpc::ServerCallContext context)
            {
                throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
            }

        }

        /// <summary>Client for Analogy</summary>
        public partial class AnalogyClient : grpc::ClientBase<AnalogyClient>
        {
            /// <summary>Creates a new client for Analogy</summary>
            /// <param name="channel">The channel to use to make remote calls.</param>
            public AnalogyClient(grpc::ChannelBase channel) : base(channel)
            {
            }
            /// <summary>Creates a new client for Analogy that uses a custom <c>CallInvoker</c>.</summary>
            /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
            public AnalogyClient(grpc::CallInvoker callInvoker) : base(callInvoker)
            {
            }
            /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
            protected AnalogyClient() : base()
            {
            }
            /// <summary>Protected constructor to allow creation of configured clients.</summary>
            /// <param name="configuration">The client configuration.</param>
            protected AnalogyClient(ClientBaseConfiguration configuration) : base(configuration)
            {
            }

            /// <summary>
            /// Sends a greeting
            /// </summary>
            /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
            /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
            /// <param name="cancellationToken">An optional token for canceling the call.</param>
            /// <returns>The call object.</returns>
            public virtual grpc::AsyncClientStreamingCall<global::Analogy.LogServer.AnalogyGRPCLogMessage, global::Analogy.LogServer.AnalogyMessageReply> SubscribeForPublishingMessages(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return SubscribeForPublishingMessages(new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            /// <summary>
            /// Sends a greeting
            /// </summary>
            /// <param name="options">The options for the call.</param>
            /// <returns>The call object.</returns>
            public virtual grpc::AsyncClientStreamingCall<global::Analogy.LogServer.AnalogyGRPCLogMessage, global::Analogy.LogServer.AnalogyMessageReply> SubscribeForPublishingMessages(grpc::CallOptions options)
            {
                return CallInvoker.AsyncClientStreamingCall(__Method_SubscribeForPublishingMessages, null, options);
            }
            public virtual grpc::AsyncServerStreamingCall<global::Analogy.LogServer.AnalogyGRPCLogMessage> SubscribeForConsumingMessages(global::Analogy.LogServer.AnalogyConsumerMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
            {
                return SubscribeForConsumingMessages(request, new grpc::CallOptions(headers, deadline, cancellationToken));
            }
            public virtual grpc::AsyncServerStreamingCall<global::Analogy.LogServer.AnalogyGRPCLogMessage> SubscribeForConsumingMessages(global::Analogy.LogServer.AnalogyConsumerMessage request, grpc::CallOptions options)
            {
                return CallInvoker.AsyncServerStreamingCall(__Method_SubscribeForConsumingMessages, null, options, request);
            }
            /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
            protected override AnalogyClient NewInstance(ClientBaseConfiguration configuration)
            {
                return new AnalogyClient(configuration);
            }
        }

        /// <summary>Creates service definition that can be registered with a server</summary>
        /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        public static grpc::ServerServiceDefinition BindService(AnalogyBase serviceImpl)
        {
            return grpc::ServerServiceDefinition.CreateBuilder()
                .AddMethod(__Method_SubscribeForPublishingMessages, serviceImpl.SubscribeForPublishingMessages)
                .AddMethod(__Method_SubscribeForConsumingMessages, serviceImpl.SubscribeForConsumingMessages).Build();
        }

        /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
        /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
        /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
        /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
        public static void BindService(grpc::ServiceBinderBase serviceBinder, AnalogyBase serviceImpl)
        {
            serviceBinder.AddMethod(__Method_SubscribeForPublishingMessages, serviceImpl == null ? null : new grpc::ClientStreamingServerMethod<global::Analogy.LogServer.AnalogyGRPCLogMessage, global::Analogy.LogServer.AnalogyMessageReply>(serviceImpl.SubscribeForPublishingMessages));
            serviceBinder.AddMethod(__Method_SubscribeForConsumingMessages, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::Analogy.LogServer.AnalogyConsumerMessage, global::Analogy.LogServer.AnalogyGRPCLogMessage>(serviceImpl.SubscribeForConsumingMessages));
        }

    }
}
#endregion
