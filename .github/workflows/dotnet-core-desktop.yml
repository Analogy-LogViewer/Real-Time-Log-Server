name: .NET Core Desktop

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [Release, Debug]

    runs-on: windows-latest  # For a list of available runner types, refer to 
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: Analogy.LogServer.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
      Test_Project_Path: Analogy.LogServer.Tests\Analogy.LogServer.Tests.csproj 
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v3.0.3
      with:
        dotnet-version: 7.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.1.3
    
    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}
    # Execute all unit tests in the solution
    - name: Execute unit tests
      run: dotnet test
    # Buid the application 
    - name: Build the application
      run: msbuild $env:Solution_Name /t:Rebuild /p:Configuration=$env:Configuration
      env:
        Configuration: ${{ matrix.configuration }}

    # Publish Artifacts 
    - name: 'Publish Artifacts'   
      uses: actions/upload-artifact@v2
      with:
       name: 'artifactory'
       path: |
        ./Analogy.LogServer.Clients/bin/${{ matrix.configuration }}
        ./Analogy.LogServer/bin/${{ matrix.configuration }}
        ./Analogy.LogServer.Configurator/bin/${{ matrix.configuration }}
        
  push-nuget:
    name: 'Push NuGet Packages'
    needs: build
    if: ${{ github.event_name == 'push'}}
    runs-on: windows-latest
    steps:
      - name: 'Download Artifact'
        uses: actions/download-artifact@v1
        with:
          name: 'artifactory'
      - name: 'Dotnet NuGet Push'
        run: |
          Get-ChildItem .\artifactory\Analogy.LogServer.Clients\bin\Release -Filter *.nupkg |
          Where-Object { !$_.Name.Contains('preview') } |
          ForEach-Object { dotnet nuget push $_ --source https://api.nuget.org/v3/index.json --skip-duplicate --api-key ${{secrets.NUGET_CLIENTS_API_KEY}} }
          Get-ChildItem .\artifactory\Analogy.LogServer\bin\Release -Filter *.nupkg |
          Where-Object { !$_.Name.Contains('preview') } |
          ForEach-Object { dotnet nuget push $_ --source https://api.nuget.org/v3/index.json --skip-duplicate --api-key ${{secrets.NUGET_LOGSERVER_API_KEY}} }
           Get-ChildItem .\artifactory\Analogy.LogServer.Configurator\bin\Release -Filter *.nupkg |
          Where-Object { !$_.Name.Contains('preview') } |
          ForEach-Object { dotnet nuget push $_ --source https://api.nuget.org/v3/index.json --skip-duplicate --api-key ${{secrets.NUGET_LOGCONFIGURATOR_API_KEY}} }
        shell: pwsh


      - name: Setup NuGet.exe for use with actions
        uses: NuGet/setup-nuget@v1.0.5

      - name: Add private GitHub registry to NuGet
        run: nuget sources add -name "GPR" -Source https://nuget.pkg.github.com/Analogy-LogViewer/index.json -Username Analogy-LogViewer -Password ${{ secrets.GITHUB_TOKEN }}

      - name: 'Dotnet NuGet Push to github registry'     
        run: |
          Get-ChildItem .\artifactory\Analogy.LogServer.Clients\bin\Release -Filter *.nupkg |
          Where-Object { !$_.Name.Contains('preview') } |
          ForEach-Object { nuget push $_  -Source "GPR" -SkipDuplicate }
          Get-ChildItem .\artifactory\Analogy.LogServer\bin\Release -Filter *.nupkg |
          Where-Object { !$_.Name.Contains('preview') } |
          ForEach-Object { nuget push $_  -Source "GPR" -SkipDuplicate }
          Get-ChildItem .\artifactory\Analogy.LogServer.Configurator\bin\Release -Filter *.nupkg |
          Where-Object { !$_.Name.Contains('preview') } |
          ForEach-Object { nuget push $_  -Source "GPR" -SkipDuplicate }

concurrency: 
  group: ${{ github.ref }}
  cancel-in-progress: true
